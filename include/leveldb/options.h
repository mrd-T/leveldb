// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
enum CompressionType {
  // NOTE: do not change the values of existing entries, as these are
  // part of the persistent format on disk.
  kNoCompression = 0x0,
  kSnappyCompression = 0x1,
  kZstdCompression = 0x2,
};

// Options to control the behavior of a database (passed to DB::Open)
/*控制数据库行为的参数
const Comparator* comparator;

用途：定义键（key）之间的排序规则。
默认值：使用字典序（lexicographic）进行比较。
注意事项：
用户必须保证每次打开同一数据库时传入相同的比较器。
比较器名称及排序逻辑必须一致，否则可能导致数据损坏或不可预料的行为。
bool create_if_missing = false;

控制是否在数据库不存在时自动创建它。
若设为 true，则当指定路径下没有数据库时会自动创建一个新数据库。
bool error_if_exists = false;

如果设为 true，当尝试打开一个已存在的数据库时会返回错误。
适用于需要确保数据库为空的新建场景。
bool paranoid_checks = false;

是否启用“激进检查”模式。
启用后会在读写过程中对数据做更严格的验证，有助于提前发现错误。
缺点是可能因为某一条记录损坏导致整个数据库无法打开。
Env* env;

环境对象指针，用于与底层系统交互（如文件读写、线程调度等）。
默认使用 Env::Default() 提供的标准实现。
可替换为自定义实现以支持特殊环境（如内存模拟、沙盒等）。
Logger* info_log = nullptr;

日志记录器指针。
若非空，则所有日志信息将输出到该对象；若为空，则日志会被写入数据库目录下的日志文件中。
二、影响性能的参数
size_t write_buffer_size = 4 * 1024 * 1024;

写缓冲区大小，默认为 4MB。
数据先写入内存中的写缓冲区，达到阈值后才会落盘。
更大的值可提升批量写入性能，但会增加内存占用，并延长恢复时间（崩溃后重新打开数据库所需时间）。
int max_open_files = 1000;

最大同时打开的文件数。
LevelDB 使用多个 SST 文件存储数据，此参数限制最大打开数量。
若工作集较大，应适当调高此值以避免频繁打开/关闭文件。
Cache* block_cache = nullptr;

块缓存指针。
用于缓存从磁盘读取的数据块，提高读取性能。
若未设置，LevelDB 将使用内置的 8MB 缓存。
size_t block_size = 4 * 1024;

每个数据块的大小，默认为 4KB。
块是 LevelDB 从磁盘读取的基本单位。
较大的块可以减少 I/O 次数，但可能浪费更多内存空间。
int block_restart_interval = 16;

在块中每隔多少条记录插入一次完整 key 的重启点。
用于优化 delta encoding（增量编码），减少存储开销。
大多数用户无需修改。
size_t max_file_size = 2 * 1024 * 1024;

每个 SST 文件的最大大小，默认为 2MB。
较大的值可减少文件数量，但会增加压缩时间和延迟。
适合初始导入大量数据时调整。
CompressionType compression = kSnappyCompression;

压缩算法类型，默认使用 Snappy。
Snappy 是一种快速压缩算法，压缩速度约 200-500MB/s，解压速度约 400-800MB/s。
即使数据不可压缩，Snappy 也会高效处理并切换为无压缩模式。
int zstd_compression_level = 1;

Zstandard 压缩算法的压缩级别。
范围为 [-5, 22]，默认为 1。
数值越大压缩率越高，但压缩速度越慢。
bool reuse_logs = false;

实验性功能：是否复用 MANIFEST 和日志文件。
若启用，可显著加快数据库打开速度。
当前默认为 false，未来可能改为默认启用。
const FilterPolicy* filter_policy = nullptr;

过滤策略指针。
用于构建布隆过滤器（Bloom Filter），减少不必要的磁盘读取。
推荐使用 NewBloomFilterPolicy() 创建标准布隆过滤器。*/
struct LEVELDB_EXPORT Options {
  // Create an Options object with default values for all fields.
  Options();

  // -------------------
  // Parameters that affect behavior

  // Comparator used to define the order of keys in the table.
  // Default: a comparator that uses lexicographic byte-wise ordering
  //
  // REQUIRES: The client must ensure that the comparator supplied
  // here has the same name and orders keys *exactly* the same as the
  // comparator provided to previous open calls on the same DB.
  const Comparator* comparator;

  // If true, the database will be created if it is missing.
  bool create_if_missing = false;

  // If true, an error is raised if the database already exists.
  bool error_if_exists = false;

  // If true, the implementation will do aggressive checking of the
  // data it is processing and will stop early if it detects any
  // errors.  This may have unforeseen ramifications: for example, a
  // corruption of one DB entry may cause a large number of entries to
  // become unreadable or for the entire DB to become unopenable.
  bool paranoid_checks = false;

  // Use the specified object to interact with the environment,
  // e.g. to read/write files, schedule background work, etc.
  // Default: Env::Default()
  Env* env;

  // Any internal progress/error information generated by the db will
  // be written to info_log if it is non-null, or to a file stored
  // in the same directory as the DB contents if info_log is null.
  Logger* info_log = nullptr;

  // -------------------
  // Parameters that affect performance

  // Amount of data to build up in memory (backed by an unsorted log
  // on disk) before converting to a sorted on-disk file.
  //
  // Larger values increase performance, especially during bulk loads.
  // Up to two write buffers may be held in memory at the same time,
  // so you may wish to adjust this parameter to control memory usage.
  // Also, a larger write buffer will result in a longer recovery time
  // the next time the database is opened.
  size_t write_buffer_size = 4 * 1024 * 1024;

  // Number of open files that can be used by the DB.  You may need to
  // increase this if your database has a large working set (budget
  // one open file per 2MB of working set).
  int max_open_files = 1000;

  // Control over blocks (user data is stored in a set of blocks, and
  // a block is the unit of reading from disk).

  // If non-null, use the specified cache for blocks.
  // If null, leveldb will automatically create and use an 8MB internal cache.
  Cache* block_cache = nullptr;

  // Approximate size of user data packed per block.  Note that the
  // block size specified here corresponds to uncompressed data.  The
  // actual size of the unit read from disk may be smaller if
  // compression is enabled.  This parameter can be changed dynamically.
  size_t block_size = 4 * 1024;

  // Number of keys between restart points for delta encoding of keys.
  // This parameter can be changed dynamically.  Most clients should
  // leave this parameter alone.
  int block_restart_interval = 16;

  // Leveldb will write up to this amount of bytes to a file before
  // switching to a new one.
  // Most clients should leave this parameter alone.  However if your
  // filesystem is more efficient with larger files, you could
  // consider increasing the value.  The downside will be longer
  // compactions and hence longer latency/performance hiccups.
  // Another reason to increase this parameter might be when you are
  // initially populating a large database.
  size_t max_file_size = 2 * 1024 * 1024;

  // Compress blocks using the specified compression algorithm.  This
  // parameter can be changed dynamically.
  //
  // Default: kSnappyCompression, which gives lightweight but fast
  // compression.
  //
  // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
  //    ~200-500MB/s compression
  //    ~400-800MB/s decompression
  // Note that these speeds are significantly faster than most
  // persistent storage speeds, and therefore it is typically never
  // worth switching to kNoCompression.  Even if the input data is
  // incompressible, the kSnappyCompression implementation will
  // efficiently detect that and will switch to uncompressed mode.
  CompressionType compression = kSnappyCompression;

  // Compression level for zstd.
  // Currently only the range [-5,22] is supported. Default is 1.
  int zstd_compression_level = 1;

  // EXPERIMENTAL: If true, append to existing MANIFEST and log files
  // when a database is opened.  This can significantly speed up open.
  //
  // Default: currently false, but may become true later.
  bool reuse_logs = false;

  // If non-null, use the specified filter policy to reduce disk reads.
  // Many applications will benefit from passing the result of
  // NewBloomFilterPolicy() here.
  const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
  // If true, all data read from underlying storage will be
  // verified against corresponding checksums.
  bool verify_checksums = false;

  // Should the data read for this iteration be cached in memory?
  // Callers may wish to set this field to false for bulk scans.
  bool fill_cache = true;

  // If "snapshot" is non-null, read as of the supplied snapshot
  // (which must belong to the DB that is being read and which must
  // not have been released).  If "snapshot" is null, use an implicit
  // snapshot of the state at the beginning of this read operation.
  const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
  WriteOptions() = default;

  // If true, the write will be flushed from the operating system
  // buffer cache (by calling WritableFile::Sync()) before the write
  // is considered complete.  If this flag is true, writes will be
  // slower.
  //
  // If this flag is false, and the machine crashes, some recent
  // writes may be lost.  Note that if it is just the process that
  // crashes (i.e., the machine does not reboot), no writes will be
  // lost even if sync==false.
  //
  // In other words, a DB write with sync==false has similar
  // crash semantics as the "write()" system call.  A DB write
  // with sync==true has similar crash semantics to a "write()"
  // system call followed by "fsync()".
  bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
